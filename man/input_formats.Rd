% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/input-formats.R
\name{input_formats}
\alias{input_formats}
\title{mrgvalidate test result input}
\description{
In order to format validation docs, mrgvalidate must collect various pieces
of information from the caller. This information can be broken down into two
categories: information about the requirements and information about the
executed tests. Below is a description of how this data is expected to be
formatted. **Note: there a companion package \code{mrgvalprep} containing
functions to preprocess common inputs (R's \code{testthat}, Googlesheets, etc.)
into the format required by \code{mrgvalidate}.
}
\details{
\subsection{Stories and requirements}{

A tibble or data.frame containing the stories, and optionally requirements,
for the software being validated. Will be passed to \code{specs} argument of
\code{\link[=create_validation_docs]{create_validation_docs()}}. Must have the following columns:
\itemize{
\item StoryId: unique identifier for the story
\item StoryName: short name of story (ideally 5-8 words max, but no hard limit)
\item StoryDescription: body of the story ("As a user,...")
\item ProductRisk: specify the risk to the product of this story (typically
"Low", "Medium", "High", etc.)
\item RequirementId (Optional): unique identifier of technical requirement
associated with story. If included, there can be >1 requirement per story,
each on its own line, in which case the first four columns will be repeated
for each requirement.
\item RequirementDescription (Optional): plain text description of the
requirement
\item TestIds: unique identifiers for tests that validate this requirement or
story. This field is used to map stories/requirements to tests.
}

The \code{mrgvalprep} packages has several helpers for importing stories into this
format. See \code{mrgvalprep::read_spec_gsheets()} and
\code{mrgvalprep::parse_github_issues()} for examples.
}

\subsection{Automated tests}{

For automated tests, a directory containing any number of CSVs with the test
results. The path will be passed to \code{auto_test_dir} argument of
\code{\link[=create_validation_docs]{create_validation_docs()}}. A CSV file must have the following columns:
\itemize{
\item TestName: a description of the test
\item passed, failed: a count of passed and failed assertions for the test
\item TestId: a unique identifier of the test. This field is used to map tests
to stories/requirements.
}

For \code{testthat} tests, the \code{mrgvalprep::parse_testthat_list_reporter()} helper can be used
to convert \link[testthat:ListReporter]{testthat::ListReporter} results into the above format.

Alongside each CSV, there must be a JSON file with the same base name. This
file includes information about the run itself (e.g., the date it was
executed and system details). At the minimum, it must have a "date" field.
Any key-value pairs that are specified under the top-level "info" field will
be rendered in the validation docs.\preformatted{\{
    "date": "2021-07-26 12:20:10 EDT",
    "info":
    \{
        "commit": "78f70b9297a7f8b0f2ec2a18d17a9cc6722359c8"
    \}
\}
}

The \code{mrgvalprep::get_sys_info()} helper can be used to capture various system details and
write them to a JSON file.
}

\subsection{Manual tests}{

\emph{(fill in when settled)}
For manual tests, a directory containing...
The path will be passed to \code{man_test_dir} argument of
\code{\link[=create_validation_docs]{create_validation_docs()}}.
}
}
\seealso{
\code{mrgvalprep::parse_testthat_list_reporter()},
\code{mrgvalprep::get_sys_info()}, \code{mrgvalprep::read_spec_gsheets()},
\code{mrgvalprep::parse_github_issues()}
}
